{"version":3,"sources":["components/Login/Login.js","components/Auth/Auth.js","components/Logout/Logout.js","components/Home/Home.js","components/CredentialDetails/CredentialDetails.js","App.js","serviceWorker.js","index.js"],"names":["props","useState","username","password","formData","setFormData","errMsg","setErrMsg","onChangeHandler","value","name","className","htmlFor","onChange","e","target","autoFocus","type","id","placeholder","onClick","event","preventDefault","fetch","method","headers","Cookies","get","body","qs","stringify","then","response","status","Error","statusText","history","push","catch","error","role","auth","setAuth","useEffect","withCredentials","credentials","json","data","sessionStorage","setItem","getItem","to","children","logout","setLogout","clear","recipients","loading","filter","state","setState","prevFilter","ref","useRef","current","usePrevious","Auth","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","key","el","credential","credentialClass","Logout","credentialDetails","setCredentialDetails","match","params","App","path","exact","component","Home","Login","CredentialDetails","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f99a6001.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Cookies from 'js-cookie';\nimport qs from 'qs'\n\nexport default (props) => {\n\n  const [formData, setFormData] = useState({\n    username: null,\n    password: null\n  })\n  const [errMsg, setErrMsg] = useState(null)\n\n  const onChangeHandler = (value, name) => {\n    setFormData({\n      ...formData,\n      [name]: value\n    })\n  }\n\n  const onLoginHandler = (event) => {\n    event.preventDefault()\n    fetch('auth/authentication/api/public/login', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"X-CSRF-TOKEN\": Cookies.get('CSRF-TOKEN')\n      },\n      body: qs.stringify({\n        username: formData.username,\n        password: formData.password\n      })\n    })\n      .then((response) => {\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n        return response;\n      }).then((response) => {\n        setErrMsg(null)\n        props.history.push('/')\n      }).catch((error) => {\n        setErrMsg('Something went wrong. Please try again!')\n      });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"col-md-6 mt-5 mx-auto text-center\">\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n            <input\n              onChange={(e) => onChangeHandler(e.target.value, e.target.name)}\n              autoFocus={true}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              name=\"username\"\n              placeholder=\"Enter email\"></input>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\n            <input\n              onChange={(e) => onChangeHandler(e.target.value, e.target.name)}\n              type=\"password\"\n              className=\"form-control\"\n              id=\"exampleInputPassword1\"\n              name=\"password\"\n              placeholder=\"Password\"></input>\n          </div>\n          <button\n            onClick={onLoginHandler}\n            type=\"submit\"\n            className=\"btn btn-primary\">Submit\n          </button>\n        </form>\n        {\n          errMsg ?\n            <div className=\"alert alert-danger mt-4\" role=\"alert\">{errMsg}</div>\n            : null\n        }\n      </div>\n    </div>\n  )\n}","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default (props) => {\n  const [auth, setAuth] = useState(null)\n\n  useEffect(() => {\n    fetch('auth/authentication/api/public/authentication', {\n      method: 'GET',\n      withCredentials: true,\n      credentials: 'same-origin'\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data) {\n          sessionStorage.setItem('loggedIn', true)\n          if (sessionStorage.getItem('loggedIn', true)) {\n            setAuth(true)\n          } else {\n            setAuth(false)\n          }\n        } else {\n          setAuth(false)\n        }\n      })\n  }, [])\n\n  if (auth === true || auth === false) {\n    if (auth === false) {\n      return <Redirect to=\"/login\" />\n    } else {\n      return props.children\n    }\n  } else {\n    return (\n      <div className=\"d-flex flex-grow-1 justify-content-center align-items-center vh-100\">\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      </div>\n    )\n  }\n}","import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default () => {\n\n  const [logout, setLogout] = useState(false)\n  const [errMsg, setErrMsg] = useState(null)\n\n  const logoutHandler = () => {\n    fetch('auth/authentication/api/public/logout', {\n      method: 'GET'\n    })\n      .then((response) => {\n        if (response.status !== 200) {\n          throw Error(response.statusText);\n        }\n        return response;\n      }).then((response) => {\n        sessionStorage.clear()\n        setLogout(true)\n      }).catch((error) => {\n        setErrMsg('Something went wrong. Please try again!')\n      });\n\n  }\n\n  if (logout) {\n    return <Redirect to=\"/login\" />\n  } else {\n    return (\n      <>\n        <button\n          className=\"btn btn-outline-primary\"\n          onClick={logoutHandler}>Logout\n        </button>\n        {\n          errMsg ?\n            <div className=\"alert alert-danger mt-4\" role=\"alert\">{errMsg}</div>\n            : null\n        }\n      </>\n    )\n  }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom'\nimport Auth from '../Auth/Auth';\nimport Logout from '../Logout/Logout';\nimport Cookies from 'js-cookie';\n\nexport default () => {\n\n  const usePrevious = (value) => {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  const [state, setState] = useState({\n    credentials: null,\n    recipients: null,\n    loading: false,\n    filter: sessionStorage.getItem('filter')\n  })\n\n  const prevFilter = usePrevious(state.filter);\n\n  useEffect(() => {\n\n    if (prevFilter !== state.filter) {\n      if (sessionStorage.getItem('filter')){\n        sessionStorage.setItem('filter', state.filter)\n      } else {\n        sessionStorage.setItem('filter', 'from=01-01-0001&to=31-12-9998')\n      }\n      fetch(`/atnr/api/issuers/8234f938-753b-4bf3-be99-13faadfb3480/recipients`, {\n        method: 'GET',\n      })\n        .then(response => response.json())\n        .then(recipients => {\n          if (recipients) {\n            fetch(`/atnr/api/issuers/8234f938-753b-4bf3-be99-13faadfb3480/credentials?${sessionStorage.getItem('filter')}`, {\n              method: 'GET'\n            })\n              .then(response => response.json())\n              .then(data => {\n                setState({ ...state, credentials: data.credentials, recipients: recipients })\n              })\n          }\n        })\n    }\n  }, [state, prevFilter])\n\n  const statusArr = ['All', 'Reference%20Letter(ext)', 'Diploma']\n\n  const updateListFilter = (type, filter) => {\n    if (type === 'credentialClassName' && filter === 'All'){\n      setState({...state, filter: `from=01-01-0001&to=31-12-9998`})\n    } else {\n      setState({...state, filter: `${type}=${filter}&from=01-01-0001&to=31-12-9998`})\n    }\n  }\n\n  return (\n    <Auth>\n      <div className=\"container mt-5\">\n        <div className=\"row pt-5\">\n          <div className=\"col-md-6 mx-auto text-center\">\n            <div className=\"dropdown\">\n              <button\n                className=\"btn btn-outline-primary shadow-none dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenuButton\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\">Sort by Status\n              </button>\n              <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                {\n                  statusArr.map((status, id) => (\n                    <span\n                      key={id}\n                      onClick={() => updateListFilter('credentialClassName', status)}\n                      className=\"dropdown-item\">{status}\n                    </span>\n                  ))\n                }\n              </div>\n            </div>\n            <ul className=\"list-group my-4\">\n              {\n                state.credentials ?\n                  state.credentials.map((el, id) => (\n                    <Link key={id} to={\"/credential-details/\" + el.credential.id}>\n                      <li className=\"list-group-item\">{el.credential.credentialClass.name}</li>\n                    </Link>\n                  ))\n                  :\n                  <div className=\"spinner-border text-primary mx-auto my-5\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                  </div>\n              }\n            </ul>\n            <Logout />\n          </div>\n        </div>\n      </div>\n    </Auth>\n  )\n}","import React, { useState, useEffect } from 'react';\n\nexport default (props) => {\n\n  const [credentialDetails, setCredentialDetails] = useState()\n\n  useEffect(() => {\n    fetch(`/atnr/api/public/credentials/${props.match.params.id}`, {\n      method: 'GET'\n    })\n      .then(response => response.json())\n      .then(data => {\n        setCredentialDetails(data.credential)\n      })\n  }, [props])\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"row\">\n        <div className=\"col-md-8 mx-auto text-center\">\n          {\n            credentialDetails ?\n              <>\n                <h3>\n                  Credential ID:\n                </h3>\n                <span>{credentialDetails.id}</span>\n                <h3>\n                  Credential Name:\n                </h3>\n                <span>{credentialDetails.credentialClass.name}</span>\n              </>\n              : null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport CredentialDetails from './components/CredentialDetails/CredentialDetails';\nimport Logout from './components/Logout/Logout';\n\nfunction App() {\n  return (\n    <BrowserRouter >\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"logout\" component={Logout} />\n      <Route path=\"/credential-details/:id\" component={CredentialDetails} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}